networks:
  ups-net:

services:
 base:
   image: postgres:16
   restart: always
   environment:
     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
   volumes:
     - postgres-data:/var/lib/postgresql/data
   networks:
     - ups-net

 adminer:
   image: adminer
   restart: always
   ports:
     - 8080:8080
   networks:
     - ups-net

 backend:
   build:
     context: ./Backend
   ports:
     - 2443:443
     - 2080:80
   depends_on:
     - base
   networks:
     - ups-net
   environment:
     FRONTEND_ORIGIN: https://localhost:3000
     ASPNETCORE_URLS: https://+
     ASPNETCORE_HTTPS_PORT: 2443
     ASPNETCORE_Kestrel__Certificates__Default__Password: certpasswd
     ASPNETCORE_Kestrel__Certificates__Default__Path: /https/upscert.pfx
     
#  proxy:
#    build:
#      context: ./Backend
#      dockerfile: ./proxy.Dockerfile
#    depends_on:
#      - base
#    environment:
#      FRONTEND_ORIGIN: https://localhost:3000
#      ASPNETCORE_HTTP_PORTS: 2106
#    ports:
#      - 2106:2106
#    volumes:
#      - key-data:/app/keys
     
#  users_micro:
#    build:
#      context: ./Backend
#      dockerfile: ./users.Dockerfile
#    depends_on:
#      - proxy
#    environment:
#      ASPNETCORE_HTTP_PORTS: 2107
#    ports:
#      - 2107:2107
#    volumes:
#      - key-data:/app/keys
     
# volumes:
#  postgres-data:
#  key-data:
#    driver: local
#    driver_opts:
#      type: none
#      device: "./protection"
#      o: bind
     
 
 frontend:
   build:
     context: ./Frontend/ups
   ports:
     - 3000:3000
   networks:
     - ups-net
   environment:
     REACT_APP_BACKEND_URL: https://localhost:2443
     
volumes:
 postgres-data:
